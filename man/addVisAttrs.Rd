% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_construction.R
\name{addVisAttrs}
\alias{addVisAttrs}
\title{Add attributes to networks to improve visualizations}
\usage{
addVisAttrs(
  network,
  node_attrs = c("all", "none", "group", "color_group", "size"),
  edge_attrs = c("all", "none", "width", "color"),
  group_vec = NULL,
  group_colors = NULL,
  size_type = c("igraph", "cytoscape", "scaled_only"),
  arrange_co = FALSE,
  width_type = NULL,
  colorblind = FALSE,
  edge_color_func = NULL
)
}
\arguments{
\item{network}{A network or a list of these. Valid classes for the network are
"igraph", "graphNEL", and "list" of two data frames with the names "edges"
and "vertices".}

\item{node_attrs}{Character strings, one or multiple of 'none', 'all' (default), 'group',
'color_group', and 'size'. This argument can be used to choose which
additional attributes should be added to the node table. Selecting 'group'
will append a column to the node table that corresponds to \code{group_vec}.
Selecting 'color_group' in addition to 'group' will add a column that
contains a color for each node, selected based on the group of this node.
Selecting 'size' will add a column with node sizes, that are based on the
connectivity of the nodes.}

\item{edge_attrs}{Character strings, one or multiple of 'none, 'all' (default), 'width',
'color'. This argument can be used to choose which additional attributes
should be added to the edge table. Selecting 'width' will add a column to
edge table that contains edge width values. These are determined by scaling
the edge weights to range 0 to 1 using a sigmoid and a method based on
\code{width_type} (more info in Details section).}

\item{group_vec}{A vector of character strings that assigns group labels to
the nodes. The order of this vector should match the order of column and
rownames of the input adjacency matrices. If \code{adj_mats} is a list, a single
group vector can be used if it matches all adjacency matrices.
Alternatively, provide a list of group vectors with one vector for each
adj. matrix in the list. For this information to be added, \code{node_attrs}
must be 'group' or 'all'.}

\item{group_colors}{Optional (default: \code{NULL}), vector of character strings
representing colors, with a color for each node group. Colors may be
provided either as color names, e.g. 'green', or as hex, e.g. "#00FF00".}

\item{size_type}{One of "igraph" (default), "cytoscape", or "scaled_only".
This argument determines a factor for linear scaling of node size. Factors
are 15, 25, and 1, respectively.}

\item{arrange_co}{Logical (default \code{FALSE}), should nodes be reordered based on
their average connectivity in multiple networks? Requires
the same node names to be present in all networks. Also requires 'size'
column to be present in node tables, so \code{node_attrs} should be 'all' or
include 'size'.}

\item{width_type}{Argument used to convert edge weights into widths for
visualizations that are more easy to interpret. Options are \code{"default_scaling"},
\code{"MI"}, \code{"cor"}, \code{"partcor"}, \code{"ranked"}, and \code{"percentile"}, or a vector
containing the name of one of the methods for each network.
A detailed description of the options can be found in the Details section.}

\item{colorblind}{Logical (default \code{FALSE}), determining if the default colors
should be exchanged for colorblind accessible colors.}

\item{edge_color_func}{A function that takes as first argument a number, and
returns a vector of colors, the length of which equals the input number.
The first colors in this vector will be used for low values, the last
colors will be assigned to high values. This argument is optional
(default \code{NULL}).}
}
\value{
Returns the input network(s) with added attributes.
}
\description{
Takes networks of 3 possible classes and adds edge and node attributes
that can be used in network visualization. A list of networks
can be provided as input, to add attributes to multiple networks at once.
}
\section{Details}{

When \code{node_attrs} or \code{edge_attrs} is a vector containing 'none' and any other
option, no additional attributes will be added.

When selecting 'group' as node attribute \code{group_vec} becomes a required
argument. When selecting 'color_group' as a node attribute, 'group' must also
be selected. The colors for the groups can be adjusted with \code{group_colors},
but this is optional. When selecting 'size' as node attribute the range of
node sizes can be adjusted with the \code{size_type} argument (when this argument
is NULL the nodes sizes will be set to work neatly for igraph visualization).
When 'width' is added as edge attribute, it is wise to check the options for
\code{width_type}, to obtain width that show the most logical contrasts for your
data. \code{width_type = NULL} (default), will scale the data to range 0 to 1 and
apply a sigmoid, so the lowest edge weights will have even lower width, and
higher weight maintain high values.

For \code{width_type} several option are available, all of which scale the absolute
values of the edge attribute "weight". The most extreme values for "weight"
get the highest value for edge width, and vice versa. The range of
edge widths will be between 0 and 1, irrespective of the chosen method.
Available options are: \code{"cor"}, which is
intended to be used with Pearson or Spearman correlation values (range -1
to 1). Widths will be the absolute value of the correlation, scaled with a
sigmoid. \code{"partcor"}, which is intended to be use for partial correlation
values (range -1 to 1). For this method, edge widths will be the cube root
of absolute weight values, scaled with a sigmoid. The option \code{"MI"} is meant
to be used with weights derived from mutual information (range 0 to +Inf).
Widths will be the weights divided by to maximum weight, then scaled with
a sigmoid. \code{"default_scaling"} applies the same transformation as \code{"MI"},
as a result scaling the any weights to range 0 to 1.
\code{"ranked"} will calculate percentage ranks of the weight, and
scale them with a sigmoid. \code{"percentile"} will chose a set of fixed widths
determined by the percentile of a weight value. The highest percentiles will
be assigned the largest width, but they are the smallest group, vice versa
for the lowest percentiles. This argument can be abbreviated.
}

\examples{
# Create grouping vector for the nodes of sepsis data
proteins <- colnames(sepsis[[1]])
groups <- dplyr::case_when(
    stringr::str_starts(proteins, "IL") ~ "group A",
    stringr::str_starts(proteins, "CCL") ~ "group B",
    stringr::str_starts(proteins, "CXCL") ~ "group C",
    TRUE ~ "group D")

# Create a network without additional attributes. Users that are adding
#   attributes an to existing network can skip this step
netw <- adjToNetwork(sepsis[[1]],
             node_attrs = "none",
             edge_attrs = "none")

# Add attributes to our network
addVisAttrs(netw,
            node_attrs = "all",
            edge_attrs = "all",
            width_type = "partcor",
            group_vec = groups)
}
\seealso{
\link{adjToNetwork} for creating a network from an adjacency matrix and
adding node and edge attributes in a single step.
}
